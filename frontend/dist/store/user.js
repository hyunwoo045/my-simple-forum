import axios from"axios";import defaultAPI from"~/core/defaultAPI";export default{namespaced:!0,state:()=>({isLoggedIn:!1,id:-1,username:""}),mutations:{setState(e,t){const{user_id:n,nickname:s}=t;e.isLoggedIn=!0,e.username=s,e.id=n},resetState(e){e.id=-1,e.username="",e.isLoggedIn=!1,localStorage.removeItem("accessToken"),localStorage.removeItem("refreshToken")}},actions:{async AccessTokenHandler({commit:e}){try{const{nickname:t,user_id:n}=await verifyAccessToken();return e("setState",{nickname:t,user_id:n}),"OK"}catch(e){return e}},async RefreshTokenHandler({commit:e}){try{const{nickname:t,user_id:n}=await verifyRefreshToken();return e("setState",{nickname:t,user_id:n}),"OK"}catch(e){return e}}}};function verifyAccessToken(){return new Promise(((e,t)=>{const n=localStorage.getItem("accessToken");n?axios.get(`${defaultAPI.end_point}/auth/check?token=${n}`).then((n=>{const s=n.data;"VALID_TOKEN"===s.message?(localStorage.setItem("accessToken",s.accessToken),localStorage.setItem("refreshToken",s.refreshToken),e({nickname:s.decoded.nickname,user_id:s.decoded.user_id})):t("NOT_VALID_ACCESS_TOKEN")})):t("NEED_LOGIN")}))}function verifyRefreshToken(){return new Promise(((e,t)=>{const n=localStorage.getItem("refreshToken");n?axios.get(`${defaultAPI.end_point}/auth/check_refresh?token=${n}`).then((n=>{const s=n.data;"VALID_REFRESH_TOKEN"===s.message?(localStorage.setItem("accessToken",s.accessToken),localStorage.setItem("refreshToken",s.refreshToken),e({nickname:s.decoded.nickname,user_id:s.decoded.user_id})):t("NOT_VALID_REFRESH_TOKEN")})):t("NEED_LOGIN")}))}